//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer cbPass
// {
//
//   float4x4 gView;                    // Offset:    0 Size:    64 [unused]
//   float4x4 gInvView;                 // Offset:   64 Size:    64 [unused]
//   float4x4 gProj;                    // Offset:  128 Size:    64 [unused]
//   float4x4 gInvProj;                 // Offset:  192 Size:    64 [unused]
//   float4x4 gViewProj;                // Offset:  256 Size:    64 [unused]
//   float4x4 gInvViewProj;             // Offset:  320 Size:    64 [unused]
//   float3 gEyePosW;                   // Offset:  384 Size:    12
//   float cbPerObjectPad1;             // Offset:  396 Size:     4 [unused]
//   float2 gRenderTargetSize;          // Offset:  400 Size:     8 [unused]
//   float2 gInvRenderTargetSize;       // Offset:  408 Size:     8 [unused]
//   float gNearZ;                      // Offset:  416 Size:     4 [unused]
//   float gFarZ;                       // Offset:  420 Size:     4 [unused]
//   float gTotalTime;                  // Offset:  424 Size:     4 [unused]
//   float gDeltaTime;                  // Offset:  428 Size:     4 [unused]
//   float4 gAmbientLight;              // Offset:  432 Size:    16
//   float4 gFogColor;                  // Offset:  448 Size:    16 [unused]
//   float gFogStart;                   // Offset:  464 Size:     4 [unused]
//   float gFogRange;                   // Offset:  468 Size:     4 [unused]
//   float2 cbPerObjectPad2;            // Offset:  472 Size:     8 [unused]
//   
//   struct Light
//   {
//       
//       float3 Strength;               // Offset:  480
//       float FalloffStart;            // Offset:  492
//       float3 Direction;              // Offset:  496
//       float FalloffEnd;              // Offset:  508
//       float3 Position;               // Offset:  512
//       float SpotPower;               // Offset:  524
//
//   } gLights[16];                     // Offset:  480 Size:   768
//
// }
//
// cbuffer cbMaterial
// {
//
//   float4 gDiffuseAlbedo;             // Offset:    0 Size:    16
//   float3 gFresnelR0;                 // Offset:   16 Size:    12
//   float gRoughness;                  // Offset:   28 Size:     4
//   float4x4 gMatTransform;            // Offset:   32 Size:    64 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// gsamAnisotropicWrap               sampler      NA          NA      S0             s4      1 
// gDiffuseMap                       texture  float4          2d      T0             t0      1 
// cbPass                            cbuffer      NA          NA     CB0            cb1      1 
// cbMaterial                        cbuffer      NA          NA     CB1            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xy          3     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_1
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1:1][41], dynamicIndexed, space=0
dcl_constantbuffer CB1[2:2][2], immediateIndexed, space=0
dcl_sampler S0[4:4], mode_default, space=0
dcl_resource_texture2d (float,float,float,float) T0[0:0], space=0
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xy
dcl_output o0.xyzw
dcl_temps 8
sample r0.xyzw, v3.xyxx, T0[0].xyzw, S0[4]
mul r1.xyzw, r0.xyzw, CB1[2][0].xyzw
dp3 r0.w, v2.xyzx, v2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v2.xyzx
add r3.xyz, -v1.xyzx, CB0[1][24].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
sqrt r0.w, r0.w
div r3.xyz, r3.xyzx, r0.wwww
add r0.w, -CB1[2][1].w, l(1.000000)
mul r2.w, r0.w, l(256.000000)
mad r0.w, r0.w, l(256.000000), l(8.000000)
mov r4.xyz, l(0,0,0,0)
mov r3.w, l(0)
loop 
  ige r4.w, r3.w, l(3)
  breakc_nz r4.w
  imul null, r4.w, r3.w, l(3)
  dp3 r5.x, -CB0[1][r4.w + 31].xyzx, r2.xyzx
  max r5.x, r5.x, l(0.000000)
  mul r5.xyz, r5.xxxx, CB0[1][r4.w + 30].xyzx
  add r6.xyz, r3.xyzx, -CB0[1][r4.w + 31].xyzx
  dp3 r5.w, r6.xyzx, r6.xyzx
  rsq r5.w, r5.w
  mul r6.xyz, r5.wwww, r6.xyzx
  dp3 r5.w, r6.xyzx, r2.xyzx
  max r5.w, r5.w, l(0.000000)
  log r5.w, r5.w
  mul r5.w, r2.w, r5.w
  exp r5.w, r5.w
  mul r5.w, r0.w, r5.w
  mul r5.w, r5.w, l(0.125000)
  dp3_sat r4.w, r6.xyzx, -CB0[1][r4.w + 31].xyzx
  add r4.w, -r4.w, l(1.000000)
  add r6.xyz, -CB1[2][1].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r6.w, r4.w, r4.w
  mul r6.w, r6.w, r6.w
  mul r4.w, r4.w, r6.w
  mad r6.xyz, r6.xyzx, r4.wwww, CB1[2][1].xyzx
  mul r7.xyz, r5.wwww, r6.xyzx
  mad r6.xyz, r6.xyzx, r5.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)
  div r6.xyz, r7.xyzx, r6.xyzx
  mad r6.xyz, r0.xyzx, CB1[2][0].xyzx, r6.xyzx
  mad r4.xyz, r6.xyzx, r5.xyzx, r4.xyzx
  iadd r3.w, r3.w, l(1)
endloop 
mad o0.xyz, CB0[1][27].xyzx, r1.xyzx, r4.xyzx
mov o0.w, r1.w
ret 
// Approximately 49 instruction slots used
